
type {{ .Name }}Store struct {
	base.Store
}

func New{{ .Name }}Store(conn *bongo.Connection) *{{ .Name }}Store {
	return &{{ .Name }}Store{*base.NewStore(conn, "{{ .Collection }}")}
}

func (s *{{ .Name }}Store) New() *{{ .Name }} {
	return &{{ .Name }}{}
}

func (s *{{ .Name }}Store) Query() *{{ .Name }}Query {
    return &{{ .Name }}Query{*base.NewBaseQuery()}
}

func (s *{{ .Name }}Store) Find(query *{{ .Name }}Query) (*{{ .Name }}ResultSet, error) {
    resultSet, err := s.Store.Find(query)
    if err != nil {
        return nil, err
    }

    return &{{ .Name }}ResultSet{*resultSet}, nil
}

{{ template "query" . }}

{{ template "resultset" . }}
