{{range .Models}}

{{if not ($.StructIsDefined .StoreName)}}
type {{.StoreName}} struct {
	storable.Store
}

func New{{.StoreName}}(db *mgo.Database) *{{.StoreName}} {
	return &{{.StoreName}}{*storable.NewStore(db, "{{ .Collection }}")}
}
{{end}}

// New returns a new instance of {{.Name}}.
func (s *{{.StoreName}}) New({{.NewArgs}}) {{.NewReturns}} {
	{{.NewRetVars}} = {{if .NewFunc}}{{.NewFunc.Name}}({{.NewArgVars}}){{else}}&{{.Name}}{}{{end}}
    doc.SetIsNew(true)
    doc.SetId(bson.NewObjectId())
    return
}

// Query return a new instance of {{.QueryName}}.
func (s *{{.StoreName}}) Query() *{{.QueryName}} {
    return &{{.QueryName}}{*storable.NewBaseQuery()}
}

// Find performs a find on the collection using the given query.
func (s *{{.StoreName}}) Find(query *{{.QueryName}}) (*{{.ResultSetName}}, error) {
    resultSet, err := s.Store.Find(query)
    if err != nil {
        return nil, err
    }

    return &{{.ResultSetName}}{ResultSet: *resultSet}, nil
}

// MustFind like Find but panics on error
func (s *{{.StoreName}}) MustFind(query *{{.QueryName}}) *{{.ResultSetName}} {
    resultSet, err := s.Find(query)
    if err != nil {
        panic(err)
    }

    return resultSet
}

// FindOne performs a find on the collection using the given query returning
// the first document from the resultset.
func (s *{{.StoreName}}) FindOne(query *{{.QueryName}}) (*{{.Name}}, error) {
    resultSet, err := s.Find(query)
    if err != nil {
        return nil, err
    }

    return resultSet.One()
}

// MustFindOne like FindOne but panics on error
func (s *{{.StoreName}}) MustFindOne(query *{{.QueryName}}) *{{.Name}} {
    doc, err := s.FindOne(query)
    if err != nil {
        panic(err)
    }

    return doc
}

// Insert insert the given document on the collection, trigger BeforeInsert and
// AfterInsert if any. Throws ErrNonNewDocument if doc is a non-new document.
func (s *{{.StoreName}}) Insert(doc *{{.Name}}) error {
		{{if .IsEventActive "BeforeInsert"}} \
		if err := s.BeforeInsert(doc); err != nil {
				return err
		}
		{{end}} \

    err := s.Store.Insert(doc)
    if err != nil {
        return err
    }

		{{if .IsEventActive "AfterInsert"}} \
		return s.AfterInsert(doc)
		{{else}} \
    return nil
		{{end}} \
}

// Update update the given document on the collection, trigger BeforeUpdate and
// AfterUpdate if any. Throws ErrNewDocument if doc is a new document.
func (s *{{.StoreName}}) Update(doc *{{.Name}}) error {
		{{if .IsEventActive "BeforeUpdate"}} \
		if err := s.BeforeUpdate(doc); err != nil {
				return err
		}
		{{end}} \

    err := s.Store.Update(doc)
    if err != nil {
        return err
    }

		{{if .IsEventActive "AfterUpdate"}} \
		return s.AfterUpdate(doc)
		{{else}} \
    return nil
		{{end}} \
}

// Save insert or update the given document on the collection using Upsert,
// trigger BeforeUpdate and AfterUpdate if the document is non-new and
// BeforeInsert and AfterInset if is new.
func (s *{{.StoreName}}) Save(doc *{{.Name}}) (updated bool, err error) {
		{{if or (.IsEventActive "BeforeUpdate") (.IsEventActive "BeforeInsert")}} \
		switch doc.IsNew() {
		{{if .IsEventActive "BeforeInsert"}} \
				case true:
						if err := s.BeforeInsert(doc); err != nil {
								return false, err
						}
		{{end}} \
		{{if .IsEventActive "BeforeUpdate"}} \
				case false:
						if err := s.BeforeUpdate(doc); err != nil {
								return false, err
						}
		{{end}} \
    }

		{{end}} \
    updated, err = s.Store.Save(doc)
    if err != nil {
        return false, err
    }

		{{if or (.IsEventActive "AfterUpdate") (.IsEventActive "AfterInsert")}} \
		switch updated {
		{{if .IsEventActive "AfterInsert"}} \
				case false:
						if err := s.AfterInsert(doc); err != nil {
								return false, err
						}
		{{end}} \
		{{if .IsEventActive "AfterUpdate"}} \
				case true:
						if err := s.AfterUpdate(doc); err != nil {
								return false, err
						}
		{{end}} \
		}

		{{end}} \
		    return
		}

{{template "query" .}}

{{template "resultset" .}}

{{end}}
