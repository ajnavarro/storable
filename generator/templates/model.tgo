{{range .Models}}

{{if not ($.StructIsDefined .StoreName)}}
type {{.StoreName}} struct {
	storable.Store
}

func New{{.StoreName}}(db *mgo.Database) *{{.StoreName}} {
	return &{{.StoreName}}{*storable.NewStore(db, "{{ .Collection }}")}
}
{{end}}

func (s *{{.StoreName}}) New() *{{.Name}} {
	doc := &{{.Name}}{}
    doc.SetIsNew(true)

    return doc
}

func (s *{{.StoreName}}) Query() *{{.QueryName}} {
    return &{{.QueryName}}{*storable.NewBaseQuery()}
}

func (s *{{.StoreName}}) Find(query *{{.QueryName}}) (*{{.ResultSetName}}, error) {
    resultSet, err := s.Store.Find(query)
    if err != nil {
        return nil, err
    }

    return &{{.ResultSetName}}{*resultSet}, nil
}

func (s *{{.StoreName}}) MustFind(query *{{.QueryName}}) *{{.ResultSetName}} {
    resultSet, err := s.Find(query)
    if err != nil {
        panic(err)
    }

    return resultSet
}


func (s *{{.StoreName}}) FindOne(query *{{.QueryName}}) (*{{.Name}}, error) {
    resultSet, err := s.Find(query)
    if err != nil {
        return nil, err
    }

    return resultSet.One()
}

func (s *{{.StoreName}}) MustFindOne(query *{{.QueryName}}) *{{.Name}} {
    doc, err := s.FindOne(query)
    if err != nil {
        panic(err)
    }

    return doc
}

func (s *{{.StoreName}}) Insert(doc *{{.Name}}) error {
    {{$.CallHooks "before" "insert" .}}
    err := s.Store.Insert(doc)
    if err != nil {
        return err
    }
    {{$.CallHooks "after" "insert" .}}

    return nil
}

func (s *{{.StoreName}}) Update(doc *{{.Name}}) error {
    {{$.CallHooks "before" "update" .}}
    err := s.Store.Update(doc)
    if err != nil {
        return err
    }
    {{$.CallHooks "after" "update" .}}

    return nil
}

{{template "query" .}}

{{template "resultset" .}}

{{end}}
