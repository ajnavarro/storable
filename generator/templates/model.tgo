{{range .Models}}

{{if not ($.StructIsDefined .StoreName)}}
type {{.StoreName}} struct {
	storable.Store
}

func New{{.StoreName}}(db *mgo.Database) *{{.StoreName}} {
	return &{{.StoreName}}{*storable.NewStore(db, "{{ .Collection }}")}
}
{{end}}

func (s *{{.StoreName}}) New() *{{.Name}} {
    {{if not ($.FunctionIsDefined (print "New" .Name))}} \
	doc := &{{.Name}}{}
    {{else}} \
    doc := New{{.Name}}()
    {{end}} \
    doc.SetIsNew(true)

    return doc
}

func (s *{{.StoreName}}) Query() *{{.QueryName}} {
    return &{{.QueryName}}{*storable.NewBaseQuery()}
}

func (s *{{.StoreName}}) Find(query *{{.Name}}Query) (*{{.ResultSetName}}, error) {
    resultSet, err := s.Store.Find(query)
    if err != nil {
        return nil, err
    }

    return &{{.ResultSetName}}{*resultSet}, nil
}

func (s *{{.StoreName}}) FindOne(query *{{.QueryName}}) (*{{.Name}}, error) {
    resultSet, err := s.Find(query)
    if err != nil {
        return nil, err
    }

    return resultSet.One()
}


{{template "query" .}}

{{template "resultset" .}}

{{end}}
