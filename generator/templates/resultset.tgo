
type {{.ResultSetName}} struct {
    storable.ResultSet
}

func (r *{{.ResultSetName}}) All() ([]*{{.Name}}, error) {
    var result []*{{.Name}}
    err := r.ResultSet.All(&result)

    return result, err
}

func (r *{{.ResultSetName}}) One() (*{{.Name}}, error) {
    var result *{{.Name}}
    err := r.ResultSet.One(&result)

    return result, err
}

func (r *{{.ResultSetName}}) Next() (*{{.Name}}, error) {
    var result *{{.Name}}
    _, err := r.ResultSet.Next(&result)

    return result, err
}

func (r *{{.ResultSetName}}) ForEach(f func(*{{.Name}}) error) error {
    for {
        var result *{{.Name}}
        found, err := r.ResultSet.Next(&result)
        if err != nil {
            return err
        }

        if !found {
            break
        }

        err = f(result)
        if err == storable.ErrStop {
            break
        }

        if  err != nil {
            return err
        }
    }

    return nil
}
